#pragma once

#include <Windows.h>

typedef NTSTATUS(NTAPI* fNtCreateCrossVmEvent)(
    PHANDLE CrossVmEvent,
    ACCESS_MASK DesiredAccess,
    POBJECT_ATTRIBUTES ObjectAttributes,
    ULONG CrossVmEventFlags,
    LPCGUID VMID,
    LPCGUID ServiceID
);

typedef NTSTATUS(NTAPI* fNtQueryInformationProcess)(
    HANDLE           ProcessHandle,
    PROCESSINFOCLASS ProcessInformationClass,
    PVOID            ProcessInformation,
    ULONG            ProcessInformationLength,
    PULONG           ReturnLength
);

typedef NTSTATUS(WINAPI* fNtFsControlFile)(
    HANDLE    FileHandle,
    HANDLE    Event,
    PVOID     ApcRoutine,
    PVOID     ApcContext,
    PVOID     IoStatusBlock,
    ULONG     FsControlCode,
    PVOID     InputBuffer,
    ULONG     InputBufferLength,
    PVOID     OutputBuffer,
    ULONG     OutputBufferLength
);

typedef struct _WNF_STATE_NAME {
    ULONG Data[2];
} WNF_STATE_NAME, *PWNF_STATE_NAME;

typedef enum _WNF_STATE_NAME_LIFETIME {
    WnfWellKnownStateName = 0x0,
    WnfPermanentStateName = 0x1,
    WnfPersistentStateName = 0x2,
    WnfTemporaryStateName = 0x3
} WNF_STATE_NAME_LIFETIME;

typedef enum _WNF_DATA_SCOPE {
    WnfDataScopeSystem = 0x0,
    WnfDataScopeSession = 0x1,
    WnfDataScopeUser = 0x2,
    WnfDataScopeProcess = 0x3,
    WnfDataScopeMachine = 0x4
} WNF_DATA_SCOPE;

typedef struct _WNF_TYPE_ID {
    GUID                              TypeId;
} WNF_TYPE_ID, * PWNF_TYPE_ID;

typedef const WNF_TYPE_ID* PCWNF_TYPE_ID;
typedef ULONG LOGICAL;
typedef ULONG WNF_CHANGE_STAMP, * PWNF_CHANGE_STAMP;
typedef const struct _WNF_STATE_NAME* PCWNF_STATE_NAME;

typedef NTSTATUS(NTAPI* fNtCreateWnfStateName)(
    PWNF_STATE_NAME StateName,
    WNF_STATE_NAME_LIFETIME NameLifetime,
    WNF_DATA_SCOPE DataScope,
    BOOLEAN PersistData,
    PCWNF_TYPE_ID TypeId,
    ULONG MaximumStateSize,
    PSECURITY_DESCRIPTOR SecurityDescriptor
);

typedef NTSTATUS(NTAPI* fNtUpdateWnfStateData)(
    PCWNF_STATE_NAME StateName,
    VOID* Buffer,
    ULONG Length,
    PCWNF_TYPE_ID TypeId,
    VOID* ExplicitScope,
    WNF_CHANGE_STAMP MatchingChangeStamp,
    LOGICAL CheckStamp
);

typedef NTSTATUS(NTAPI* fNtDeleteWnfStateData)(
    PWNF_STATE_NAME StateName,
    VOID* ExplicitScope
);

typedef NTSTATUS(NTAPI* fNtQueryWnfStateData)(
    PCWNF_STATE_NAME StateName,
    PCWNF_TYPE_ID TypeId,
    VOID* ExplicitScope,
    PWNF_CHANGE_STAMP ChangeStamp,
    PVOID Buffer,
    PULONG BufferSize
);

typedef NTSTATUS(NTAPI* fNtDeleteWnfStateName)(
    PCWNF_STATE_NAME StateName
);


#define InitializeObjectAttributes( p, n, a, r, s ) { \
    (p)->Length = sizeof( OBJECT_ATTRIBUTES );          \
    (p)->RootDirectory = r;                             \
    (p)->Attributes = a;                                \
    (p)->ObjectName = n;                                \
    (p)->SecurityDescriptor = s;                        \
    (p)->SecurityQualityOfService = NULL;               \
    }

// https://www.vergiliusproject.com/kernels/x64/windows-11/23h2/_POOL_HEADER
//0x10 bytes (sizeof)
typedef struct _POOL_HEADER
{
    union
    {
        struct
        {
            USHORT PreviousSize : 8;                                          //0x0
            USHORT PoolIndex : 8;                                             //0x0
            USHORT BlockSize : 8;                                             //0x2
            USHORT PoolType : 8;                                              //0x2
        };
        ULONG Ulong1;                                                       //0x0
    };
    ULONG PoolTag;                                                          //0x4
    union
    {
        PVOID ProcessBilled;                                    //0x8
        struct
        {
            USHORT AllocatorBackTraceIndex;                                 //0x8
            USHORT PoolTagHash;                                             //0xa
        };
    };
} POOL_HEADER;

//0x8 bytes (sizeof)
struct _NT_IORING_CREATE_FLAGS
{
    enum _NT_IORING_CREATE_REQUIRED_FLAGS Required;                         //0x0
    enum _NT_IORING_CREATE_ADVISORY_FLAGS Advisory;                         //0x4
};

//0x30 bytes (sizeof)
typedef struct _NT_IORING_INFO
{
    enum IORING_VERSION IoRingVersion;                                      //0x0
    struct _NT_IORING_CREATE_FLAGS Flags;                                   //0x4
    ULONG SubmissionQueueSize;                                              //0xc
    ULONG SubmissionQueueRingMask;                                          //0x10
    ULONG CompletionQueueSize;                                              //0x14
    ULONG CompletionQueueRingMask;                                          //0x18
    PVOID SubmissionQueue;                    //0x20
    PVOID CompletionQueue;                    //0x28
}NT_IORING_INFO, * PNT_IORING_INFO;

//0x18 bytes (sizeof)
struct _DISPATCHER_HEADER
{
    union
    {
        volatile LONG Lock;                                                 //0x0
        LONG LockNV;                                                        //0x0
        struct
        {
            UCHAR Type;                                                     //0x0
            UCHAR Signalling;                                               //0x1
            UCHAR Size;                                                     //0x2
            UCHAR Reserved1;                                                //0x3
        };
        struct
        {
            UCHAR TimerType;                                                //0x0
            union
            {
                UCHAR TimerControlFlags;                                    //0x1
                struct
                {
                    UCHAR Absolute : 1;                                       //0x1
                    UCHAR Wake : 1;                                           //0x1
                    UCHAR EncodedTolerableDelay : 6;                          //0x1
                };
            };
            UCHAR Hand;                                                     //0x2
            union
            {
                UCHAR TimerMiscFlags;                                       //0x3
                struct
                {
                    UCHAR Index : 6;                                          //0x3
                    UCHAR Inserted : 1;                                       //0x3
                    volatile UCHAR Expired : 1;                               //0x3
                };
            };
        };
        struct
        {
            UCHAR Timer2Type;                                               //0x0
            union
            {
                UCHAR Timer2Flags;                                          //0x1
                struct
                {
                    UCHAR Timer2Inserted : 1;                                 //0x1
                    UCHAR Timer2Expiring : 1;                                 //0x1
                    UCHAR Timer2CancelPending : 1;                            //0x1
                    UCHAR Timer2SetPending : 1;                               //0x1
                    UCHAR Timer2Running : 1;                                  //0x1
                    UCHAR Timer2Disabled : 1;                                 //0x1
                    UCHAR Timer2ReservedFlags : 2;                            //0x1
                };
            };
            UCHAR Timer2ComponentId;                                        //0x2
            UCHAR Timer2RelativeId;                                         //0x3
        };
        struct
        {
            UCHAR QueueType;                                                //0x0
            union
            {
                UCHAR QueueControlFlags;                                    //0x1
                struct
                {
                    UCHAR Abandoned : 1;                                      //0x1
                    UCHAR DisableIncrement : 1;                               //0x1
                    UCHAR QueueReservedControlFlags : 6;                      //0x1
                };
            };
            UCHAR QueueSize;                                                //0x2
            UCHAR QueueReserved;                                            //0x3
        };
        struct
        {
            UCHAR ThreadType;                                               //0x0
            UCHAR ThreadReserved;                                           //0x1
            union
            {
                UCHAR ThreadControlFlags;                                   //0x2
                struct
                {
                    UCHAR CycleProfiling : 1;                                 //0x2
                    UCHAR CounterProfiling : 1;                               //0x2
                    UCHAR GroupScheduling : 1;                                //0x2
                    UCHAR AffinitySet : 1;                                    //0x2
                    UCHAR Tagged : 1;                                         //0x2
                    UCHAR EnergyProfiling : 1;                                //0x2
                    UCHAR SchedulerAssist : 1;                                //0x2
                    UCHAR ThreadReservedControlFlags : 1;                     //0x2
                };
            };
            union
            {
                UCHAR DebugActive;                                          //0x3
                struct
                {
                    UCHAR ActiveDR7 : 1;                                      //0x3
                    UCHAR Instrumented : 1;                                   //0x3
                    UCHAR Minimal : 1;                                        //0x3
                    UCHAR Reserved4 : 2;                                      //0x3
                    UCHAR AltSyscall : 1;                                     //0x3
                    UCHAR Emulation : 1;                                      //0x3
                    UCHAR Reserved5 : 1;                                      //0x3
                };
            };
        };
        struct
        {
            UCHAR MutantType;                                               //0x0
            UCHAR MutantSize;                                               //0x1
            UCHAR DpcActive;                                                //0x2
            UCHAR MutantReserved;                                           //0x3
        };
    };
    LONG SignalState;                                                       //0x4
    struct _LIST_ENTRY WaitListHead;                                        //0x8
};

//0x18 bytes (sizeof)
struct _RTL_BALANCED_NODE
{
    union
    {
        struct _RTL_BALANCED_NODE* Children[2];                             //0x0
        struct
        {
            struct _RTL_BALANCED_NODE* Left;                                //0x0
            struct _RTL_BALANCED_NODE* Right;                               //0x8
        };
    };
    union
    {
        struct
        {
            UCHAR Red : 1;                                                    //0x10
            UCHAR Balance : 2;                                                //0x10
        };
        ULONGLONG ParentValue;                                              //0x10
    };
};

//0x20 bytes (sizeof)
struct _IOP_MC_BE_PAGE_NODE
{
    struct _RTL_BALANCED_NODE Node;                                         //0x0
    ULONG PageIndex;                                                        //0x18
};

//0x18 bytes (sizeof)
struct _KEVENT
{
    struct _DISPATCHER_HEADER Header;                                       //0x0
};

typedef struct _UIORING
{
    HANDLE handle;
    NT_IORING_INFO Info;
    ULONG IoRingKernelAcceptedVersion;
    PVOID RegBufferArray;
    ULONG BufferArraySize;
    PVOID Unknown;
    ULONG FileHandlesCount;
    ULONG SubQueueHead;
    ULONG SubQueueTail;
} UIORING, * PUIORING;

//0x80 bytes (sizeof)
typedef struct _IOP_MC_BUFFER_ENTRY
{
    USHORT Type;                                                            //0x0
    USHORT Reserved;                                                        //0x2
    ULONG Size;                                                             //0x4
    LONG ReferenceCount;                                                    //0x8
    enum _IOP_MC_BUFFER_ENTRY_FLAGS Flags;                                  //0xc
    struct _LIST_ENTRY GlobalDataLink;                                      //0x10
    VOID* Address;                                                          //0x20
    ULONG Length;                                                           //0x28
    CHAR AccessMode;                                                        //0x2c
    LONG MdlRef;                                                            //0x30
    struct _MDL* Mdl;                                                       //0x38
    struct _KEVENT MdlRundownEvent;                                         //0x40
    ULONGLONG* PfnArray;                                                    //0x58
    struct _IOP_MC_BE_PAGE_NODE PageNodes[1];                               //0x60
} IOP_MC_BUFFER_ENTRY, * PIOP_MC_BUFFER_ENTRY;

// https://www.vergiliusproject.com/kernels/x64/windows-11/23h2/_WNF_STATE_DATA
//0x10 bytes (sizeof)
typedef struct _WNF_STATE_DATA
{
    DWORD Header;                                                           //0x0
    ULONG AllocatedSize;                                                    //0x4
    ULONG DataSize;                                                         //0x8
    ULONG ChangeStamp;                                                      //0xc
} WNF_STATE_DATA;

// https://www.vergiliusproject.com/kernels/x64/windows-11/23h2/_WNF_NODE_HEADER
//0x4 bytes (sizeof)
typedef struct _WNF_NODE_HEADER
{
    USHORT NodeTypeCode;                                                    //0x0
    USHORT NodeByteSize;                                                    //0x2
} WNF_NODE_HEADER;

